SAS off.
lock throttle to 0.

clearscreen.
wait 3.

set targetAp to 888000.
set targetPer to 275000.
set azimuth to 95 .
set firstTWR to 1.26.
set secondTWR to 0.26.
set endTWR to 7.
set endAlt to (100000 / firstTWR).
set finalPitch to 15.
set startRoll to 270.
set endRoll to 0.
set booster to ship:partsdubbed("booster")[0].
set cE to ship:partsdubbed("cE")[0].
set rl to ship:partsdubbed("e2")[0].
set fe to ship:partsdubbed("fireball").
set mode to 1.
set jet to 0.

until mode = 0 {
	if mode = 1 {
		lock throttle to 1.
		for e in fe {
			e:activate().
		}
		set fe[0]:thrustlimit to 40.
		set fe[1]:thrustlimit to 30.
		set fe[2]:thrustlimit to 50.
		set fe[3]:thrustlimit to 20.
		set fe[4]:thrustlimit to 45.
		set fe[5]:thrustlimit to 35.
		wait 1.5.
		stage.
		wait 2.
		for e in fe {
			e:shutdown().
		}
		wait 2.5.
		stage.
		set steeringmanager:ROLLTS to 5.
		set steeringmanager:rolltorqueadjust to 0.3.
		lock steering to heading(90,90) + R(0,0,startRoll).
		wait 7.
		set mode to 2.
		set endRoll to 0.
	}
	if mode = 2 {
		set pitchAim to (max(finalPitch,90 * (1 - (SHIP:ALTITUDE / endAlt)))).
		lock steering to heading (azimuth, pitchAim) + R(0,0,endRoll).
		if (missiontime > 55) {
			set cE:thrustlimit to 8.2.
		}
		if (booster:resources[1]:amount < 300) {
			wait 2.
			stage.
			set cE:thrustlimit to 100.
			set mode to 3.
			set finalPitch to 12.
			set pitchAim to (max(finalPitch,90 * (1 - (SHIP:ALTITUDE / endAlt)))).
			lock steering to heading (azimuth, pitchAim) + R(0,0,endRoll).
			wait 1.
			set finalPitch to 9.
			set pitchAim to (max(finalPitch,90 * (1 - (SHIP:ALTITUDE / endAlt)))).
			lock steering to heading (azimuth, pitchAim) + R(0,0,endRoll).
			wait 1.
			set mode to 3.
		}
	
	}
	
	if mode = 5 {
		lock steering to heading (vel_bearing(), pitchAim)  + R(0,0,endRoll).
		timetoAP().
		if SHIP:MAXTHRUST > 1 {
			set currentAcc to SHIP:MAXTHRUST / SHIP:MASS.
		}
		
		if (SHIP:ALTITUDE > 180000 and jet = 0) {
			toggle ag2.
			wait 5.
			toggle ag1.
			set jet to 1.
		}
		set progradePitch to proPitch().
		
		set feedAP to SHIP:APOAPSIS + (SHIP:VERTICALSPEED * TTA) + (0.5 * (currentAcc * sin(progradePitch) - 9.81) * (TTA * TTA)).
		set velPot to (2 * currentAcc * TTA) + SHIP:GROUNDSPEED.
		
		if (feedAP < targetPer OR velPot < 7000) AND pitchAim < 35 {
			set pitchAim to pitchAim + 0.05.
			wait 0.01.
		}
		
		if (feedAP > targetPer OR velPot > 7000) AND pitchAim > -10 {
			set pitchAim to pitchAim - 0.05.
			wait 0.01.
		}
		
		if SHIP:APOAPSIS > targetPer {
			set mode to 4.
		}
	}
	
	
	if mode = 3 {
		set pitchAim to (max(finalPitch,90 * (1 - (SHIP:ALTITUDE / endAlt)))).
		lock steering to heading (azimuth, pitchAim) + R(0,0,endRoll).
		
		if SHIP:MAXTHRUST < 1  {
			lock throttle to 0.
			unlock steering.
			stage.
			RCS on.
			set ship:control:fore to 1.
			wait 5.
			rl:getmodule("ModuleAnimateGeneric"):doevent("deploy nozzle extension").
			wait 7.
			lock throttle to 1.
			wait 2.
			set ship:control:fore to 0.
			set mode to 5.
		}
	}
	
	if mode = 4 {
		if SHIP:VERTICALSPEED > 20.0 and pitchAim > -15 {
			set pitchAim to pitchAim - 0.12.
			lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
			wait 0.01.
		} else if SHIP:VERTICALSPEED < -20.0 and pitchAim < 25 {
			set pitchAim to pitchAim + 0.12.
			lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
			wait 0.01.
		} else if SHIP:VERTICALSPEED >= -20.0 and SHIP:VERTICALSPEED <= 20.0 {
			if pitchAim > 0 {
				set pitchAim to pitchAim - 0.12.
				lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
				wait 0.01.
			}
			if pitchAim < 0 {
				set pitchAim to pitchAim + 0.12.
				lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
				wait 0.01.
			}
		}
		if SHIP:APOAPSIS > targetAp * 1.01 and SHIP:PERIAPSIS > 160000 {
			lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
			lock throttle to 0.
			wait 2.
			set mode to 9.
		}
	}

	print "              --- MODE " + mode + " ---" at (5,2).	
	print "Ground Speed: " + GROUNDSPEED at (5,3).
	print "Vertical Speed: " + VERTICALSPEED at (5,4).
	print "Pitch Aim: " + pitchAim at (5,5).
	print "Apoapsis: " + SHIP:APOAPSIS at (5,6).
	print "Periapsis: " + SHIP:PERIAPSIS at (5,7).

	
	if mode = 9 {
		lock throttle to 0.
		unlock steering.
		clearscreen.
		print "Launch Concluded.".
		set mode to 0. 
		
	}
}

function timetoAP{
	set TTA to ETA:APOAPSIS.
	
	if ETA:APOAPSIS > (SHIP:OBT:PERIOD / 2) {
		set TTA to ETA:APOAPSIS - SHIP:OBT:PERIOD.
	}
}

function proPitch {
	return 90 - vang(ship:up:vector, ship:velocity:surface).
}

function vel_bearing {

    local trig_x is vdot( heading( 90, 0 ):vector, ship:prograde:vector ).
    local trig_y is vdot( heading(  0, 0 ):vector, ship:prograde:vector ).

    return mod( arctan2( trig_x, trig_y ) +360, 360 ).
}