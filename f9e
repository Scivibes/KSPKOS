SAS off.
lock throttle to 0.

clearscreen.
wait 3.

set targetAp to 450000.
set targetPer to 220000.
set firstTWR to 1.5.
set secondTWR to 0.96.
set endTWR to 8.5.
set endAlt to (120000 / firstTWR).
set finalPitch to 12.
set startRoll to 270.
set endRoll to 0.
set azimuth to 90.
set s1 to SHIP:PARTSDUBBED("s1")[0].
set startfuel to s1:resources[1]:amount.
set s1fuel to startfuel.
set peakQ to 0.

set altPid to PIDLOOP(0.005, 0.0003, 0.007).
set altPid:maxoutput to 20.
set altPid:minoutput to -10.
set velPid to PIDLOOP(0.5, 0.00003, 0.007).
set velPid:maxoutput to 15.
set velPid:minoutput to -5.

set mode to 1.
set frame to 0.

until mode = 0 {
	if (ship:Q > peakQ) {
		set peakQ to ship:Q.
	}
	set frame to frame + 1.
	if (frame = 25) {
		clearscreen.
		set frame to 0.
	}
	if mode = 1 {
		toggle ag5.
		wait 6.
		lock throttle to 1.
		wait 0.05.
		stage.
		wait 4.
		stage.
		
		set steeringmanager:ROLLTS to 10.
		set steeringmanager:rolltorqueadjust to 0.1.
		lock steering to heading(90,90) + R(0,0,startRoll).
		wait 5.
		set mode to 2.
	}
	if mode = 2 {
		set pitchAim to (max(finalPitch,90 * (1 - (SHIP:ALTITUDE / endAlt)))).
		wait 0.14.
		lock steering to heading (azimuth, pitchAim)  + R(0,0,endRoll).
		set tSpeed to sqrt(ship:verticalspeed^2 + ship:groundspeed^2).
		if (tSpeed > 295 and tSpeed < 335) {
			lock throttle to 0.5.
		} else {
			lock throttle to 1.
		}
		print "Fuel ratio: " + (s1fuel/startfuel) at (5,10).
		set s1fuel to s1:resources[1]:amount.
		if (s1fuel < 2) {
			lock throttle to 0.
			unlock steering.
			wait 0.5.
			stage.
			RCS on.
			set ship:control:fore to 1.
			wait 4.
			lock throttle to 1.
			wait 1.5.
			set ship:control:fore to 0.
			wait 4.
			set mode to 3.
		}

	}
	
	if mode = 3 {
		if (alt:radar > 125000) {
			toggle ag1.
		}
		
		lock steering to heading (azimuth, pitchAim)  + R(0,0,endRoll).
		timetoAP().
		if SHIP:MAXTHRUST > 1 {
			set currentAcc to SHIP:MAXTHRUST / SHIP:MASS.
		} else {
			set currentAcc to 0.0001.
		}
	
		set progradePitch to proPitch().
		
		set feedAP to SHIP:APOAPSIS + (SHIP:VERTICALSPEED * TTA) + (0.5 * (currentAcc * sin(progradePitch) - 9.81) * (TTA * TTA)).
		set velPot to (2 * currentAcc * TTA) + SHIP:GROUNDSPEED.
		
		if (feedAP < targetPer OR velPot < 7000) AND pitchAim < 25 {
			set pitchAim to pitchAim + 0.05.
			wait 0.01.
		}
		
		if (feedAP > targetPer OR velPot > 7000) AND pitchAim > -10 {
			set pitchAim to pitchAim - 0.05.
			wait 0.01.
		}
		
		if SHIP:APOAPSIS > targetPer {
			set mode to 4.
		}
		
	}
	
	if mode = 4 {
		lock steering to heading (azimuth, pitchAim) + R(0,0,endRoll).
		set mAlt to alt:radar.
		set altOut to altPid:update(time:seconds, (mAlt - targetPer) + (ship:verticalspeed * 10)).		
		print "Target velocity : " + altOut at (5,10).
		set velOut to velPid:update(time:seconds, (ship:verticalspeed - altOut)).
		set pitchAim to velOut.
		
		if SHIP:APOAPSIS > targetAp * 1.01 and SHIP:PERIAPSIS > 160000 {
			lock steering to heading (azimuth, pitchAim) + R(0,0,endRoll).
			lock throttle to 0.
			wait 2.
			set mode to 9.
		}
	}
	
	print "        ---MODE " + mode + "---" at (5,2).
	print "Surface Velocity: " + SHIP:GROUNDSPEED at (5,3).
	print "Vertical Velocity: " + SHIP:VERTICALSPEED at (5,4).
	print "Apoapsis: " + SHIP:APOAPSIS at (5,5).
	print "Perpiapsis: " + SHIP:PERIAPSIS at (5,6).
	print "Pitch aim: " + pitchAim at (5,7).
	print "Aerodynamic pressure " + SHIP:Q at (5,8).
	print "Peak Q: " + peakQ at (5,9).
	
	
	if mode = 9 {
		lock throttle to 0.
		unlock steering.
		print "Launch Concluded.".
		set mode to 0. 
		
	}
}

function timetoAP{
	set TTA to ETA:APOAPSIS.
	
	if ETA:APOAPSIS > (SHIP:OBT:PERIOD / 2) {
		set TTA to ETA:APOAPSIS - SHIP:OBT:PERIOD.
	}
}

function proPitch {
	return 90 - vang(ship:up:vector, ship:velocity:surface).
}