SAS off.
lock throttle to 0.

clearscreen.
wait 3.

set targetAp to 250000.
set targetPer to 250000.
set azimuth to 90.
set firstTWR to 1.77.
set secondTWR to 1.17.
set endAlt to (120000 / firstTWR).
set endTWR to 6.05.
set finalPitch to 10.
set startRoll to 270.
set endRoll to 270.
set boosterJet to 90.
set liftoffTimer to 0.
set s1 to ship:partsdubbed("s1")[0].
set jet to 0.

set mode to 1.

until mode = 0 {
	if mode = 1 {
		lock throttle to 1.
		wait 0.05.
		stage.
		wait 5.
		stage.
		set steeringmanager:ROLLTS to 10.
		set steeringmanager:rolltorqueadjust to 0.1.
		lock liftoffTimer to MISSIONTIME.
		lock steering to heading(90,90) + R(0,0,startRoll).
		wait 5.
		set mode to 2.
	}
	if mode = 2 {
		set pitchAim to (max(finalPitch,90 * (1 - (SHIP:ALTITUDE / endAlt)))).
		lock steering to heading (azimuth, pitchAim) + R(0,0,endRoll).
		if liftoffTimer > boosterJet AND jet < 1 {
			stage.
			wait 1.5.
			stage.
			set jet to 2.
		}
		
		if (s1:resources[2]:amount < 5) {
			set jet to 3.
			lock throttle to 0.
			wait 2.
			stage.
			RCS on.
			wait 4.
			lock throttle to 1.
			set mode to 3.
		}
		if liftoffTimer > 150 and liftoffTimer < 170{
			lock throttle to 0.8.
		}
		if liftoffTimer > 170 and liftoffTimer < 200{
			lock throttle to 0.6.
		}
		if liftoffTimer > 200 and liftoffTimer < 235{
			lock throttle to 0.4.
		}
		if (liftoffTimer > 235) {
			lock throttle to 0.2.
		}
		
		if SHIP:ALTITUDE > 105000 and SHIP:ALTITUDE < 110000{
			toggle ag1.
			wait 2.
			toggle ag2.
			set endRoll to 0.
		}
	
	}
	
	if mode = 3 {
		lock throttle to 1.
		timetoAP().
		if SHIP:MAXTHRUST > 1 {
			set currentAcc to SHIP:MAXTHRUST / SHIP:MASS.
		} else {
			set currentAcc to 0.
		}
		
		set progradePitch to proPitch().
		
		set feedAP to SHIP:APOAPSIS + (SHIP:VERTICALSPEED * TTA) + (0.5 * (currentAcc * sin(progradePitch) - 9.81) * (TTA * TTA)).
		set velPot to (2 * currentAcc * TTA) + SHIP:GROUNDSPEED.
		
		if (feedAP < targetPer OR velPot < 7000) AND pitchAim < 30 {
			set pitchAim to pitchAim + 0.05.
			wait 0.01.
		}
		
		if (feedAP > targetPer OR velPot > 7000) AND pitchAim > -10 {
			set pitchAim to pitchAim - 0.05.
			wait 0.01.
		}
		
		if SHIP:APOAPSIS > targetPer {
			set mode to 4.
		}
		
	}
	
	if mode = 4 {
		if SHIP:VERTICALSPEED > 20.0 and pitchAim > -15 {
			set pitchAim to pitchAim - 0.12.
			lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
			wait 0.01.
		} else if SHIP:VERTICALSPEED < -20.0 and pitchAim < 25 {
			set pitchAim to pitchAim + 0.12.
			lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
			wait 0.01.
		} else if SHIP:VERTICALSPEED >= -20.0 and SHIP:VERTICALSPEED <= 20.0 {
			if pitchAim > 0 {
				set pitchAim to pitchAim - 0.12.
				lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
				wait 0.01.
			}
			if pitchAim < 0 {
				set pitchAim to pitchAim + 0.12.
				lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
				wait 0.01.
			}
		}
		if SHIP:APOAPSIS > targetAp * 1.01 and SHIP:PERIAPSIS > 160000 {
			lock steering to heading (vel_bearing(), pitchAim) + R(0,0,endRoll).
			lock throttle to 0.
			wait 2.
			set mode to 9.
		}
	}

	print "          --- MODE " + mode + " ---" at (5,2).	
	print "Ground Speed: " + GROUNDSPEED at (5,3).
	print "Vertical Speed: " + VERTICALSPEED at (5,4).
	print "Pitch Aim: " + pitchAim at (5,5).
	print "Apoapsis: " + SHIP:APOAPSIS at (5,6).
	print "Periapsis: " + SHIP:PERIAPSIS at (5,7).
	print "Timer: " + liftoffTimer at (5,8).

	
	if mode = 9 {
		lock throttle to 0.
		unlock steering.
		clearscreen.
		print "Launch Concluded.".
		set mode to 0. 
		
	}
}

function timetoAP{
	set TTA to ETA:APOAPSIS.
	
	if ETA:APOAPSIS > (SHIP:OBT:PERIOD / 2) {
		set TTA to ETA:APOAPSIS - SHIP:OBT:PERIOD.
	}
}

function proPitch {
	return 90 - vang(ship:up:vector, ship:velocity:surface).
}

function vel_bearing {

    local trig_x is vdot( heading( 90, 0 ):vector, ship:srfprograde:vector ).
    local trig_y is vdot( heading(  0, 0 ):vector, ship:srfprograde:vector ).

    return mod( arctan2( trig_x, trig_y ) +360, 360 ).
}