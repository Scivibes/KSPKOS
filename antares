//IMPORTANT INFO
//MAKE SURE THE SOLID MOTOR SECOND STAGE IS NAMED s2 WITH THE NAMETAG FUNCTION
//MAKE SURE THE FAIRINGS ARE BOUND TO ACTION GROUP 1

SAS off.
lock throttle to 0.

clearscreen.
wait 3.

set targetAp to 400000.
set targetPer to 400000.
set azimuth to 128.65.
set firstTWR to 1.19.
set endAlt to (150000 / firstTWR).
set finalPitch to 8.
set startRoll to 270.
set endRoll to 0.
set mode to 1.
set s2 to ship:partsdubbed("s2")[0].

until mode = 0 {
	if mode = 1 {
		lock throttle to 1.
		wait 0.05.
		stage.
		wait 4.1.
		stage.
		set steeringmanager:ROLLTS to 10.
		set steeringmanager:rolltorqueadjust to 0.3.
		lock steering to heading(90,90) + R(0,0,startRoll).
		wait 5.
		set mode to 2.
	}
	if mode = 2 {
		set pitchAim to (max(finalPitch,90 * (1 - (SHIP:ALTITUDE / endAlt)))).
		lock steering to heading (azimuth, pitchAim) + R(0,0,endRoll).
		timetoAP().
		set e to ship:orbit:eccentricity.
		set ra to body:radius + ship:apoapsis.
		set rp to body:radius + ship:periapsis.
		set m to body:mu.
		set v0 to sqrt((2 * m * rp)/(ra * (ra + rp))).
		set v1 to sqrt(m / ra).
		set dv to v1 - v0.
		
		if (ship:maxthrust < 1 or dv < 5030) {
			lock throttle to 0.
			wait 2.
			stage.
			rcs on.
			wait 4.
			toggle ag1.
			set mode to 3.
		}
		
	}
	
	if mode = 3 {
		timetoAP().
		set e to ship:orbit:eccentricity.
		set ra to body:radius + ship:apoapsis.
		set rp to body:radius + ship:periapsis.
		set m to body:mu.
		set v0 to sqrt((2 * m * rp)/(ra * (ra + rp))).
		set v1 to sqrt(m / ra).
		set dv to v1 - v0.
		set myNode to node(time:seconds + TTA, 0, 0, dv).
		add myNode.
		set mode to 4.
	}
	
	
	if mode = 4 {
		set dir to myNode:deltav:direction.
		lock steering to dir + R(0,0,endRoll).
		
		if (myNode:eta < 90) {
			stage.
			wait 2.
			stage.
			set mode to 5.
		}
	}
	
	
	if mode = 5 {
		set dir to myNode:deltav:direction.
		lock steering to dir + R(0,0,endRoll).
		if (s2:resources[2]:amount < 25) {
			set mode to 9.
			remove myNode.
			wait 3.
		}
	}

	print "              --- MODE " + mode + " ---" at (5,2).	
	print "Ground Speed: " + GROUNDSPEED at (5,3).
	print "Vertical Speed: " + VERTICALSPEED at (5,4).
	print "Pitch Aim: " + pitchAim at (5,5).
	print "Apoapsis: " + SHIP:APOAPSIS at (5,6).
	print "Periapsis: " + SHIP:PERIAPSIS at (5,7).

	
	if mode = 9 {
		lock throttle to 0.
		unlock steering.
		clearscreen.
		print "Launch Concluded.".
		set mode to 0. 
		
	}
}

function timetoAP{
	set TTA to ETA:APOAPSIS.
	
	if ETA:APOAPSIS > (SHIP:OBT:PERIOD / 2) {
		set TTA to ETA:APOAPSIS - SHIP:OBT:PERIOD.
	}
}

function proPitch {
	return 90 - vang(ship:up:vector, ship:velocity:surface).
}

function vel_bearing {

    local trig_x is vdot( heading( 90, 0 ):vector, ship:srfprograde:vector ).
    local trig_y is vdot( heading(  0, 0 ):vector, ship:srfprograde:vector ).

    return mod( arctan2( trig_x, trig_y ) +360, 360 ).
}
